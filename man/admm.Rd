% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/admm.R
\name{admm}
\alias{admm}
\title{ADMM algorithm for fitting l1-penalized additive mixed models}
\usage{
admm(y, X, Z, S, lambda, tau, data, rho = 1, epsilonAbs = 1e-04,
  epsilonRel = 1e-04, iterMax = 1000, warm = NULL, forCV = FALSE,
  centerZ = FALSE, verbose = FALSE)
}
\arguments{
\item{y}{character string denoting output variable}

\item{X}{list of fixed effect design matrices setup by l1smooth}

\item{Z}{random effect design matrix setup by randomEffects}

\item{S}{random effect penalty matrix setup by randomEffects}

\item{lambda}{scalar smoothing parameter for random effects}

\item{tau}{vector of smoothing parameters for fixed effects}

\item{data}{dataset}

\item{rho}{ADMM penalty parameter}

\item{epsilonAbs}{absolute error in ADMM (tolerance for convergence)}

\item{epsilonRel}{relative error in ADMM (tolerance for convergence)}

\item{warm}{list of warm start parameters}

\item{forCV}{TRUE/FALSE If FALSE, returns less information in fitted object}

\item{centerZ}{TRUE/FALSE If TRUE, imposes centering constraints on random effects}

\item{verbose}{TRUE/FALSE If TRUE, prints ADMM iteration}

\item{iterMAx}{maximum number of ADMM iterations}
}
\description{
This function obtains point estimates via the ADMM algorithm
}
\examples{
library(psplinesl1)
data(simData)

# setup p-spline matrices
X <- list(ps(x = "x", data = simData, 
             norder = 2, k = 1, width = 0.05,
             center = TRUE))

# setup random effect matrices
rand <- re(x = "x", id = "id", data = simData,
           randomCurves = FALSE)

# fit model with ADMM
a1 <- admm(y = "y", X, Z = rand$Z, S = rand$S,
            tau = 0.0502,
            lambda = 0.169,
            rho = 0.169,
            data = simData)

# get and plot fitted model with confidence bands
CI <- ci(model = a1, alpha = 0.05)
CI

# extract values from ci object for custom plotting
CIpoly <- data.frame(x = c(CI[[1]]$x, rev(CI[[1]]$x)), 
                     y = c(CI[[1]]$yLowerBayesQuick, 
                           rev(CI[[1]]$yUpperBayesQuick)))

ggplot(aes(x = x, y = y), data = newDat)+
  geom_polygon(data = CIpoly, fill = "grey")+
  geom_line(aes(x = CI[[1]]$x, y = CI[[1]]$smooth))
}
\keyword{ADMM}

